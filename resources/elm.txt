The Elm Architecture is a simple pattern for infinitely nestable components. It is great for modularity, code reuse, and testing. Ultimately, it makes it easy to create complex web apps that stay healthy as you refactor and add features.

This architecture seems to emerge naturally in Elm. We first observed it in the games the Elm community was making. Then in web apps like TodoMVC and dreamwriter too. Now we see it running in production at companies like NoRedInk and CircuitHub. The architecture seems to be a consequence of the design of Elm itself, so it will happen to you whether you know about it or not. This has proven to be really nice for onboarding new developers. Their code just turns out well-architected. It is kind of spooky.

So The Elm Architecture is easy in Elm, but it is useful in any front-end project. In fact, projects like Redux translate The Elm Architecture into JavaScript pretty directly, so you may have already seen derivatives of this pattern. Point is, even if you ultimately cannot use Elm at work yet, you will get a lot out of using Elm and internalizing this pattern.

The logic of every Elm program will break up into three cleanly separated parts:

Model — the state of your application
Update — a way to update your state
View — a way to view your state as HTML
This pattern is so reliable that I always start with the following skeleton and fill in details for my particular case.

That is really the essence of The Elm Architecture! We will proceed by filling in this skeleton with increasingly interesting logic.

The last section showed how to handle all sorts of user input, but what can we do with it?

This section builds on the basic pattern we have seen so far, giving you the ability to make HTTP requests or subscribe to messages from web sockets. All of these effects are built on two important concepts:

Commands — A command is a way of demanding some effect. Maybe this is asking for a random number or making an HTTP request. Anything where you are asking for some value and the answer may be different depending on what is going on in the world.

Subscriptions — A subscription lets you register that you are interested in something. Maybe you want to hear about geolocation changes? Maybe you want to hear all the messages coming in on a web socket? Subscriptions let you sit passively and only get updates when they exist.

Together, commands and subscriptions make it possible for your Elm components to talk the outside world. But how do these new concepts fit into what we already know?

Extending the Architecture Skeleton

So far our architecture skeleton has focused on creating Model types and update and view functions. To handle commands and subscriptions, we need to extend the basic architecture skeleton a little bit:

The first three sections are almost exactly the same, but there are a few new things overall:

The update function now returns more than just a new model. It returns a new model and some commands you want to run. These commands are all going to produce Msg values that will get fed right back into our update function.

There is a subscriptions function. This function lets you declare any event sources you need to subscribe to given the current model. Just like with Html Msg and Cmd Msg, these subscriptions will produce Msg values that get fed right back into our update function.

So far init has just been the initial model. Now it produces both a model and some commands, just like the new update. This lets us provide a starting value and kick off any HTTP requests or whatever that are needed for initialization.

Now it is totally okay if this does not really make sense yet! That only really happens when you start seeing it in action, so lets hop right into the examples!

Aside: One crucial detail here is that commands and subscriptions are data. When you create a command, you do not actually do it. Same with commands in real life. Let's try it. Eat an entire watermelon in one bite! Did you do it? No! You kept reading before you even thought about buying a tiny watermelon.

Point is, commands and subscriptions are data. You hand them to Elm to actually run them, giving Elm a chance to log all of this information. In the end, effects-as-data means Elm can:

Have a general purpose time-travel debugger.
Keep the "same input, same output" guarantee for all Elm functions.
Avoid setup/teardown phases when testing update logic.
Cache and batch effects, minimizing HTTP connections or other resources.
So without going too crazy on details, pretty much all the nice guarantees and tools you have in Elm come from the choice to treat effects as data! I think this will make more sense as you get deeper into Elm.

The Elm Architecture + Reusable Components

So we are doing pretty well so far. We can handle user input. We can make HTTP requests. We can communicate on web sockets. That is a solid start, but what happens when our code starts getting big? It would be crazy to just grow your Model and update functions endlessly. This is where Elm's module system comes in!

The basic idea is: nest The Elm Architecture pattern again and again. So you will create modules with a public API like this:

module Story exposing (Model, Msg, init, update, view, subscriptions)
In fact, this is what we have been doing in all the examples so far, just without explicitly adding a module declaration.

Once we make it a module, anyone can import it and use it how they please. And most importantly, they can only see the exposed values like view. All of the details of how that is implemented are hidden away.

The following sections will cover:

Nesting — How does it actually look when we start nesting modules like this?
Communication — Once we have a bunch of nested modules, we may need them to talk amongst themselves. How do design modules that make this pleasant?
Like normal, we do this by stepping through examples.

One of Elm's major benefits is that users do not see runtime errors in practice. This is possible because the Elm compiler can analyze your source code very quickly to see how values flow through your program. If a value can ever be used in an invalid way, the compiler tells you about it with a friendly error message. This is called type inference. The compilers figures out what type of values flow in and out of all your functions.

Error Handling and Tasks

One of the guarantees of Elm is that you will not see runtime errors in practice. NoRedInk has been using Elm in production for about a year now, and they still have not had one! Like all guarantees in Elm, this comes down to fundamental language design choices. In this case, we are helped by the fact that Elm treats errors as data. (Have you noticed we make things data a lot here?)

This section is going to walk through three data structures that help you handle errors in a couple different ways.

Maybe
Result
Task
Now some of you probably want to jump right to tasks, but trust me that going in order will help here! You can think of these three data structures as a progression that slowly address crazier and crazier situations. So if you jump in at the end, it will be a lot to figure out all at once.

Some Historical Context

There are a two popular language features that consistently cause unexpected problems. If you have used Java or C or JavaScript or Python or Ruby, you have almost certainly had your code crash because of null values or surprise exceptions from someone else's code.

Now these things are extremely familiar to folks, but that does not mean they are good!

Null

Any time you think you have a String you just might have a null instead. Should you check? Did the person giving you the value check? Maybe it will be fine? Maybe it will crash your servers? I guess we will find out later!

The inventor, Tony Hoare, has this to say about it:

I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.

As we will see soon, the point of Maybe is to avoid this problem in a pleasant way.

Exceptions

Joel Spolsky outlined the issues with exceptions pretty nicely in the year 2003. Essentially, code that looks fine may actually crash at runtime. Surprise!

The point of Result is to make the possibility of failure clear and make sure it is handled appropriately.

The point of Task is pretty much the same, but it also works when we have code that runs asynchronously. Your error handling mechanism shouldn't totally fall apart just because you make an HTTP request!
